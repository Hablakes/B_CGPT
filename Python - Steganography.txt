from PIL import Image
import binascii

# Open the image and get the pixel map
image = Image.open("original.png")
pixels = image.load()

# Open the message file and read in the message
with open("message.txt", "r") as message_file:
    message = message_file.read()

# Convert the message to a binary string
binary_string = ''.join(format(ord(c), '08b') for c in message)

# Set a counter for the current position in the binary string
counter = 0

# Iterate over the pixels in the image
for i in range(image.size[0]):
    for j in range(image.size[1]):
        # Get the current pixel's RGB values
        r, g, b = pixels[i, j]

        # Set the least significant bit of each RGB value to the next bit in the binary string
        pixels[i, j] = (r[:-1] + binary_string[counter], g[:-1] + binary_string[counter + 1], b[:-1] + binary_string[counter + 2])

        # Increment the counter by 3 (one for each of the R, G, and B values)
        counter += 3

# Save the modified image
image.save("hidden.png")









OR







from PIL import Image

# Open the image
with Image.open("image.jpg") as im:
    # Encode the message in the image
    encoded_im = im.point(lambda i: i + int(ord(message[i % len(message)])))
    # Save the encoded image
    encoded_im.save("encoded_image.jpg")



from PIL import Image

# Open the encoded image
with Image.open("encoded_image.jpg") as encoded_im:
    # Decode the message from the image
    message = "".join([chr(i - int(ord(message[i % len(message)]))) for i in encoded_im.point()])
    print(message)



import stegano
from stegano import lsb

# Hide the message in the image
secret = lsb.hide("image.png", "This is a secret message.")
secret.save("encoded_image.png")

# Extract the message from the encoded image
clear_message = lsb.reveal("encoded_image.png")
print(clear_message)





