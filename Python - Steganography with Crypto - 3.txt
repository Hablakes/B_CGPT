import tkinter as tk
from tkinter import filedialog
from PIL import Image
import os
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend


def start_process(key, message, image, process):
    # Open the image
    img = Image.open(image)
    # Create a new nonce
    nonce = os.urandom(12)
    # Create the cipher
    cipher = Cipher(algorithms.AES(key.encode()), modes.GCM(nonce), backend=default_backend())
    if process == "encrypt":
        # Create the encryptor
        encryptor = cipher.encryptor()
        # Encrypt the message
        ciphertext = encryptor.update(message.encode()) + encryptor.finalize()
        # Save the nonce to a file
        with open("nonce.bin", "wb") as f:
            f.write(nonce)
        # Perform steganography to hide the ciphertext in the image
        # ...
        success_label.config(text="Encryption successful")
    elif process == "decrypt":
        # Read the nonce from the file
        with open("nonce.bin", "rb") as f:
            nonce = f.read()
        # Perform steganography to extract the ciphertext from the image
        # ...
        # Create the decryptor
        decryptor = cipher.decryptor()
        # Decrypt the ciphertext
        plaintext = decryptor.update(ciphertext) + decryptor.finalize()
        # Insert the plaintext into the message entry widget
        message_entry.delete(0, tk.END)
        message_entry.insert(0, plaintext.decode())
        # Show a success message
        success_label.config(text="Decryption successful")


def encrypt():
    start_process(key_entry.get(), message_entry.get(), image_entry.get(), "encrypt")


def decrypt():
    start_process(key_entry.get(), message_entry.get(), image_entry.get(), "decrypt")


def browse_image():
    image_path = filedialog.askopenfilename(initialdir = "/", title = "Select an image", filetypes = (("PNG files", "*.png"), ("all files", "*.*")))
    image_entry.delete(0, tk.END)
    image_entry.insert(0, image_path)


root = tk.Tk()

image_label = tk.Label(root, text="Image path:")
image_label.grid(row=0, column=0)

image_entry = tk.Entry(root)
image_entry.grid(row=0, column=1)

browse_image_button = tk.Button(root, text="Browse", command=browse_image)
browse_image_button.grid(row=0, column=2)

key_label = tk.Label(root, text="Key:")
key_label.grid(row=1, column=0)

key_entry = tk.Entry(root)
key_entry.grid(row=1, column=1)

message_label = tk.Label(root, text="Message:")
message_label.grid(row=2, column=0)

message_entry = tk.Entry(root)
message_entry.grid(row=2, column=1)

encrypt_button = tk.Button(root, text="Encrypt", command=encrypt)
encrypt_button.grid(row=3, column=0)

decrypt_button = tk.Button(root, text="Decrypt", command=decrypt)
decrypt_button.grid(row=3, column=1)

success_label = tk.Label(root)
success_label.grid(row=4, column=1)

root.mainloop()



